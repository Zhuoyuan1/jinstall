#!/usr/bin/python

import argparse
import os
import subprocess
import sys

def error(*objs):
    print(*objs, file=sys.stderr)

def debug(*objs):
    error(*objs)

def rdir(dirpath, cmd):
    # recurse directory
    cmds = cmd.split(':')

    rdirname = cmds[0]
    erdirname = rdirname.replace("_", "\_")
    rdirpath = os.path.join(dirpath, rdirname)

    if not os.path.exists(rdirpath):
        error("error: rdir in unexisting directory {}".
                format(rdirpath))
        return ""

    ret = "group:{}..\n".format(erdirname)
    ret += "exec::makemenu:{} -p {}\n".format(sys.argv[0], rdirpath)
    ret += "show:::{}\n".format(rdirname)
    ret += "remove:::{}\n".format(rdirname)
    ret += "endgroup\n"

    return ret

def link(dirpath, cmd):
    # link file
    cmds = cmd.split(':')

    srcname = cmds[0]
    esrcname = srcname.replace("_", "\_")
    srcpath = os.path.join(dirpath, cmds[0])

    dstpath = os.path.expanduser(cmds[1])
    dstdir = os.path.dirname(dstpath)

    if not os.path.exists(srcpath):
        error("error: link for unexisting file {}".
                format(srcpath))
        return ""

    if os.path.exists(dstpath):
        if (os.path.realpath(dstpath) == srcpath):
            esrcname = '*' + esrcname
        else:
            esrcname = '%' + esrcname

    ret = "group:{}\n".format(esrcname)
    ret += "exec::noclear:mkdir -p {}\n".format(dstdir)
    ret += "exec::pause:ln -siv {} {}\n".format(srcpath, dstpath)
    ret += "endgroup\n"

    return ret

commands = {
        "rdir" : rdir,
        "link" : link,
        }

def generate_menu(dirpath):
    dir = os.path.split(dirpath)[1]
    menu = "menu:{0}:{0}\n".format(dir)

    install_filepath = os.path.join(dirpath, "Jinstall")
    with open(install_filepath) as f:
        for line in f:
            cmd = line.strip().split(':', maxsplit=1)
            menu += commands[cmd[0]](dirpath, cmd[1])

    return menu

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("dir", nargs="?", default=os.getcwd(),
            help = "Start from a specific directory "
                   "instead of the current one")
    parser.add_argument("-p", "--pdmenu",
            help = "Only generate a string for feeding pdmenu",
            action = "store_true")
    args = parser.parse_args()

    # determine the Jinstall file
    dirpath = os.path.realpath(args.dir)

    menu_content = generate_menu(dirpath)
    if not args.pdmenu:
        with subprocess.Popen(["pdmenu", "-"],
                stdin = subprocess.PIPE,
                universal_newlines = True) as pdmenu:
            pdmenu.communicate(menu_content)

    else:
        print(menu_content)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        error("An error occurred: {!s}".format(e))
        sys.exit(1)
